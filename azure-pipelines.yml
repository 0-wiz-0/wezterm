trigger:
  branches:
    include: ['master']
  tags:
    include: ['*']

jobs:
  - job: 'Clippy'
    pool:
      vmImage: 'ubuntu-16.04'
    container: 'rust:latest'
    steps:
      - checkout: self
        submodules: true
      - script: rustup component add clippy
        displayName: Install clippy
      - script: |
          sudo ./get-deps
        displayName: Install system dependencies
      - script: cargo clippy --all
        displayName: Run Clippy

  - job: 'Rustfmt'
    pool:
      vmImage: 'ubuntu-16.04'
    container: 'rust:latest'
    steps:
      - script: rustup component add rustfmt
        displayName: Install Rustfmt
      - script: cargo fmt --all -- --check
        displayName: Check formatting

  - job: 'Test'
    # A list of vmImage names can be found at:
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops#use-a-microsoft-hosted-agent
    strategy:
      matrix:
        windows-stable:
          imageName: 'vs2017-win2016'
          rustup_toolchain: stable
        mac-stable:
          imageName: 'macos-10.14'
          rustup_toolchain: stable
        linux-stable:
          imageName: 'ubuntu-16.04'
          rustup_toolchain: stable
        linux-beta:
          imageName: 'ubuntu-16.04'
          rustup_toolchain: beta
        linux-nightly:
          imageName: 'ubuntu-16.04'
          rustup_toolchain: nightly
    pool:
      vmImage: $(imageName)
    steps:
      - checkout: self
        submodules: true
      #- script: |
      #    git submodule update --init
      #  displayName: Update submodules
      - script: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          echo "##vso[task.setvariable variable=PATH;]$HOME/.cargo/bin:$PATH"
        displayName: Install rust
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
      - script: |
          curl -sSf -o rustup-init.exe https://win.rustup.rs
          rustup-init.exe -yv --default-toolchain %RUSTUP_TOOLCHAIN%
          echo "##vso[task.setvariable variable=PATH;]%USERPROFILE%\.cargo\bin;%PATH%"
        displayName: Windows install rust
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      - script: |
          rustup update
        displayName: Update rust toolchains
      - script: |
          rustc -vV
          cargo -vV
        displayName: Show installed rust+cargo version
      - script: |
          sudo ./get-deps
        displayName: Install system dependencies
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
      - script: cargo build --all
        displayName: Cargo build
      - script: cargo test --all
        displayName: Cargo test

  - job: 'Package'
    strategy:
      matrix:
        windows-stable:
          imageName: 'vs2017-win2016'
          rustup_toolchain: stable
        mac-stable:
          imageName: 'macos-10.14'
          rustup_toolchain: stable
        linux-stable:
          imageName: 'ubuntu-16.04'
          rustup_toolchain: stable
    pool:
      vmImage: $(imageName)
    steps:
      - checkout: self
        submodules: true
      #- script: |
      #    git submodule update --init
      #  displayName: Update submodules
      - script: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          echo "##vso[task.setvariable variable=PATH;]$HOME/.cargo/bin:$PATH"
        displayName: Install rust (posix)
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
      - script: |
          curl -sSf -o rustup-init.exe https://win.rustup.rs
          rustup-init.exe -yv --default-toolchain %RUSTUP_TOOLCHAIN%
          echo "##vso[task.setvariable variable=PATH;]%USERPROFILE%\.cargo\bin;%PATH%"
        displayName: install rust (windows)
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
      - script: |
          rustup update
        displayName: Update rust toolchains
      - script: |
          rustc -vV
          cargo -vV
        displayName: Show installed rust+cargo version
      - script: |
          sudo ./get-deps
        displayName: Install system dependencies
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
      - script: cargo build --release --all
        displayName: Build in release mode
      - script: ci/deploy.sh
        displayName: Packaging
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
