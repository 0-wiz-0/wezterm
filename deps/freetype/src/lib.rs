/* automatically generated by rust-bindgen 0.58.1 */

#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(clippy::unreadable_literal)]
#![allow(clippy::upper_case_acronyms)]
pub type FT_Int16 = i16;
pub type FT_UInt16 = u16;
pub type FT_Int32 = i32;
pub type FT_UInt32 = u32;
pub type FT_Int64 = i64;
pub type FT_UInt64 = u64;

pub const FT_RENDER_POOL_SIZE: u32 = 16384;
pub const FT_MAX_MODULES: u32 = 32;
pub const FT_CHAR_BIT: u32 = 8;
pub const FT_USHORT_MAX: u32 = 65535;
pub const FT_INT_MAX: u32 = 2147483647;
pub const FT_INT_MIN: i32 = -2147483648;
pub const FT_UINT_MAX: u32 = 4294967295;
pub const FT_LONG_MIN: i64 = -9223372036854775808;
pub const FT_LONG_MAX: u64 = 9223372036854775807;
pub const FT_ULONG_MAX: i32 = -1;
pub const FT_SIZEOF_INT: u32 = 4;
pub const FT_SIZEOF_LONG: u32 = 8;
pub const FT_OUTLINE_CONTOURS_MAX: u32 = 32767;
pub const FT_OUTLINE_POINTS_MAX: u32 = 32767;
pub const FT_OUTLINE_NONE: u32 = 0;
pub const FT_OUTLINE_OWNER: u32 = 1;
pub const FT_OUTLINE_EVEN_ODD_FILL: u32 = 2;
pub const FT_OUTLINE_REVERSE_FILL: u32 = 4;
pub const FT_OUTLINE_IGNORE_DROPOUTS: u32 = 8;
pub const FT_OUTLINE_SMART_DROPOUTS: u32 = 16;
pub const FT_OUTLINE_INCLUDE_STUBS: u32 = 32;
pub const FT_OUTLINE_OVERLAP: u32 = 64;
pub const FT_OUTLINE_HIGH_PRECISION: u32 = 256;
pub const FT_OUTLINE_SINGLE_PASS: u32 = 512;
pub const FT_CURVE_TAG_ON: u32 = 1;
pub const FT_CURVE_TAG_CONIC: u32 = 0;
pub const FT_CURVE_TAG_CUBIC: u32 = 2;
pub const FT_CURVE_TAG_HAS_SCANMODE: u32 = 4;
pub const FT_CURVE_TAG_TOUCH_X: u32 = 8;
pub const FT_CURVE_TAG_TOUCH_Y: u32 = 16;
pub const FT_CURVE_TAG_TOUCH_BOTH: u32 = 24;
pub const FT_Curve_Tag_On: u32 = 1;
pub const FT_Curve_Tag_Conic: u32 = 0;
pub const FT_Curve_Tag_Cubic: u32 = 2;
pub const FT_Curve_Tag_Touch_X: u32 = 8;
pub const FT_Curve_Tag_Touch_Y: u32 = 16;
pub const FT_RASTER_FLAG_DEFAULT: u32 = 0;
pub const FT_RASTER_FLAG_AA: u32 = 1;
pub const FT_RASTER_FLAG_DIRECT: u32 = 2;
pub const FT_RASTER_FLAG_CLIP: u32 = 4;
pub const FT_ERR_BASE: u32 = 0;
pub const FT_FACE_FLAG_SCALABLE: u32 = 1;
pub const FT_FACE_FLAG_FIXED_SIZES: u32 = 2;
pub const FT_FACE_FLAG_FIXED_WIDTH: u32 = 4;
pub const FT_FACE_FLAG_SFNT: u32 = 8;
pub const FT_FACE_FLAG_HORIZONTAL: u32 = 16;
pub const FT_FACE_FLAG_VERTICAL: u32 = 32;
pub const FT_FACE_FLAG_KERNING: u32 = 64;
pub const FT_FACE_FLAG_FAST_GLYPHS: u32 = 128;
pub const FT_FACE_FLAG_MULTIPLE_MASTERS: u32 = 256;
pub const FT_FACE_FLAG_GLYPH_NAMES: u32 = 512;
pub const FT_FACE_FLAG_EXTERNAL_STREAM: u32 = 1024;
pub const FT_FACE_FLAG_HINTER: u32 = 2048;
pub const FT_FACE_FLAG_CID_KEYED: u32 = 4096;
pub const FT_FACE_FLAG_TRICKY: u32 = 8192;
pub const FT_FACE_FLAG_COLOR: u32 = 16384;
pub const FT_FACE_FLAG_VARIATION: u32 = 32768;
pub const FT_STYLE_FLAG_ITALIC: u32 = 1;
pub const FT_STYLE_FLAG_BOLD: u32 = 2;
pub const FT_OPEN_MEMORY: u32 = 1;
pub const FT_OPEN_STREAM: u32 = 2;
pub const FT_OPEN_PATHNAME: u32 = 4;
pub const FT_OPEN_DRIVER: u32 = 8;
pub const FT_OPEN_PARAMS: u32 = 16;
pub const FT_LOAD_DEFAULT: u32 = 0;
pub const FT_LOAD_NO_SCALE: u32 = 1;
pub const FT_LOAD_NO_HINTING: u32 = 2;
pub const FT_LOAD_RENDER: u32 = 4;
pub const FT_LOAD_NO_BITMAP: u32 = 8;
pub const FT_LOAD_VERTICAL_LAYOUT: u32 = 16;
pub const FT_LOAD_FORCE_AUTOHINT: u32 = 32;
pub const FT_LOAD_CROP_BITMAP: u32 = 64;
pub const FT_LOAD_PEDANTIC: u32 = 128;
pub const FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH: u32 = 512;
pub const FT_LOAD_NO_RECURSE: u32 = 1024;
pub const FT_LOAD_IGNORE_TRANSFORM: u32 = 2048;
pub const FT_LOAD_MONOCHROME: u32 = 4096;
pub const FT_LOAD_LINEAR_DESIGN: u32 = 8192;
pub const FT_LOAD_NO_AUTOHINT: u32 = 32768;
pub const FT_LOAD_COLOR: u32 = 1048576;
pub const FT_LOAD_COMPUTE_METRICS: u32 = 2097152;
pub const FT_LOAD_BITMAP_METRICS_ONLY: u32 = 4194304;
pub const FT_LOAD_ADVANCE_ONLY: u32 = 256;
pub const FT_LOAD_SBITS_ONLY: u32 = 16384;
pub const FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS: u32 = 1;
pub const FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES: u32 = 2;
pub const FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID: u32 = 4;
pub const FT_SUBGLYPH_FLAG_SCALE: u32 = 8;
pub const FT_SUBGLYPH_FLAG_XY_SCALE: u32 = 64;
pub const FT_SUBGLYPH_FLAG_2X2: u32 = 128;
pub const FT_SUBGLYPH_FLAG_USE_MY_METRICS: u32 = 512;
pub const FT_FSTYPE_INSTALLABLE_EMBEDDING: u32 = 0;
pub const FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING: u32 = 2;
pub const FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING: u32 = 4;
pub const FT_FSTYPE_EDITABLE_EMBEDDING: u32 = 8;
pub const FT_FSTYPE_NO_SUBSETTING: u32 = 256;
pub const FT_FSTYPE_BITMAP_EMBEDDING_ONLY: u32 = 512;
pub const FT_LCD_FILTER_FIVE_TAPS: u32 = 5;
pub const FT_MODULE_FONT_DRIVER: u32 = 1;
pub const FT_MODULE_RENDERER: u32 = 2;
pub const FT_MODULE_HINTER: u32 = 4;
pub const FT_MODULE_STYLER: u32 = 8;
pub const FT_MODULE_DRIVER_SCALABLE: u32 = 256;
pub const FT_MODULE_DRIVER_NO_OUTLINES: u32 = 512;
pub const FT_MODULE_DRIVER_HAS_HINTER: u32 = 1024;
pub const FT_MODULE_DRIVER_HINTS_LIGHTLY: u32 = 2048;
pub const FT_DEBUG_HOOK_TRUETYPE: u32 = 0;
pub const FT_VAR_AXIS_FLAG_HIDDEN: u32 = 1;
pub type size_t = ::std::os::raw::c_ulong;
pub type FT_Fast = ::std::os::raw::c_int;
pub type FT_UFast = ::std::os::raw::c_uint;
pub type FT_Memory = *mut FT_MemoryRec_;
pub type FT_Alloc_Func = ::std::option::Option<
    unsafe extern "C" fn(
        memory: FT_Memory,
        size: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type FT_Free_Func = ::std::option::Option<
    unsafe extern "C" fn(memory: FT_Memory, block: *mut ::std::os::raw::c_void),
>;
pub type FT_Realloc_Func = ::std::option::Option<
    unsafe extern "C" fn(
        memory: FT_Memory,
        cur_size: ::std::os::raw::c_long,
        new_size: ::std::os::raw::c_long,
        block: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_MemoryRec_ {
    pub user: *mut ::std::os::raw::c_void,
    pub alloc: FT_Alloc_Func,
    pub free: FT_Free_Func,
    pub realloc: FT_Realloc_Func,
}
pub type FT_Stream = *mut FT_StreamRec_;
#[repr(C)]
#[derive(Copy, Clone)]
pub union FT_StreamDesc_ {
    pub value: ::std::os::raw::c_long,
    pub pointer: *mut ::std::os::raw::c_void,
}
pub type FT_StreamDesc = FT_StreamDesc_;
pub type FT_Stream_IoFunc = ::std::option::Option<
    unsafe extern "C" fn(
        stream: FT_Stream,
        offset: ::std::os::raw::c_ulong,
        buffer: *mut ::std::os::raw::c_uchar,
        count: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong,
>;
pub type FT_Stream_CloseFunc = ::std::option::Option<unsafe extern "C" fn(stream: FT_Stream)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FT_StreamRec_ {
    pub base: *mut ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_ulong,
    pub pos: ::std::os::raw::c_ulong,
    pub descriptor: FT_StreamDesc,
    pub pathname: FT_StreamDesc,
    pub read: FT_Stream_IoFunc,
    pub close: FT_Stream_CloseFunc,
    pub memory: FT_Memory,
    pub cursor: *mut ::std::os::raw::c_uchar,
    pub limit: *mut ::std::os::raw::c_uchar,
}
pub type FT_StreamRec = FT_StreamRec_;
pub type FT_Pos = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Vector_ {
    pub x: FT_Pos,
    pub y: FT_Pos,
}
pub type FT_Vector = FT_Vector_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_BBox_ {
    pub xMin: FT_Pos,
    pub yMin: FT_Pos,
    pub xMax: FT_Pos,
    pub yMax: FT_Pos,
}
pub type FT_BBox = FT_BBox_;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FT_Pixel_Mode_ {
    FT_PIXEL_MODE_NONE = 0,
    FT_PIXEL_MODE_MONO = 1,
    FT_PIXEL_MODE_GRAY = 2,
    FT_PIXEL_MODE_GRAY2 = 3,
    FT_PIXEL_MODE_GRAY4 = 4,
    FT_PIXEL_MODE_LCD = 5,
    FT_PIXEL_MODE_LCD_V = 6,
    FT_PIXEL_MODE_BGRA = 7,
    FT_PIXEL_MODE_MAX = 8,
}
pub use self::FT_Pixel_Mode_ as FT_Pixel_Mode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Bitmap_ {
    pub rows: ::std::os::raw::c_uint,
    pub width: ::std::os::raw::c_uint,
    pub pitch: ::std::os::raw::c_int,
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub num_grays: ::std::os::raw::c_ushort,
    pub pixel_mode: ::std::os::raw::c_uchar,
    pub palette_mode: ::std::os::raw::c_uchar,
    pub palette: *mut ::std::os::raw::c_void,
}
pub type FT_Bitmap = FT_Bitmap_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Outline_ {
    pub n_contours: ::std::os::raw::c_short,
    pub n_points: ::std::os::raw::c_short,
    pub points: *mut FT_Vector,
    pub tags: *mut ::std::os::raw::c_char,
    pub contours: *mut ::std::os::raw::c_short,
    pub flags: ::std::os::raw::c_int,
}
pub type FT_Outline = FT_Outline_;
pub type FT_Outline_MoveToFunc = ::std::option::Option<
    unsafe extern "C" fn(
        to: *const FT_Vector,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type FT_Outline_LineToFunc = ::std::option::Option<
    unsafe extern "C" fn(
        to: *const FT_Vector,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type FT_Outline_ConicToFunc = ::std::option::Option<
    unsafe extern "C" fn(
        control: *const FT_Vector,
        to: *const FT_Vector,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type FT_Outline_CubicToFunc = ::std::option::Option<
    unsafe extern "C" fn(
        control1: *const FT_Vector,
        control2: *const FT_Vector,
        to: *const FT_Vector,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Outline_Funcs_ {
    pub move_to: FT_Outline_MoveToFunc,
    pub line_to: FT_Outline_LineToFunc,
    pub conic_to: FT_Outline_ConicToFunc,
    pub cubic_to: FT_Outline_CubicToFunc,
    pub shift: ::std::os::raw::c_int,
    pub delta: FT_Pos,
}
pub type FT_Outline_Funcs = FT_Outline_Funcs_;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FT_Glyph_Format_ {
    FT_GLYPH_FORMAT_NONE = 0,
    FT_GLYPH_FORMAT_COMPOSITE = 1668246896,
    FT_GLYPH_FORMAT_BITMAP = 1651078259,
    FT_GLYPH_FORMAT_OUTLINE = 1869968492,
    FT_GLYPH_FORMAT_PLOTTER = 1886154612,
}
pub use self::FT_Glyph_Format_ as FT_Glyph_Format;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_RasterRec_ {
    _unused: [u8; 0],
}
pub type FT_Raster = *mut FT_RasterRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Span_ {
    pub x: ::std::os::raw::c_short,
    pub len: ::std::os::raw::c_ushort,
    pub coverage: ::std::os::raw::c_uchar,
}
pub type FT_Span = FT_Span_;
pub type FT_SpanFunc = ::std::option::Option<
    unsafe extern "C" fn(
        y: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        spans: *const FT_Span,
        user: *mut ::std::os::raw::c_void,
    ),
>;
pub type FT_Raster_BitTest_Func = ::std::option::Option<
    unsafe extern "C" fn(
        y: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        user: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type FT_Raster_BitSet_Func = ::std::option::Option<
    unsafe extern "C" fn(
        y: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        user: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Raster_Params_ {
    pub target: *const FT_Bitmap,
    pub source: *const ::std::os::raw::c_void,
    pub flags: ::std::os::raw::c_int,
    pub gray_spans: FT_SpanFunc,
    pub black_spans: FT_SpanFunc,
    pub bit_test: FT_Raster_BitTest_Func,
    pub bit_set: FT_Raster_BitSet_Func,
    pub user: *mut ::std::os::raw::c_void,
    pub clip_box: FT_BBox,
}
pub type FT_Raster_Params = FT_Raster_Params_;
pub type FT_Raster_NewFunc = ::std::option::Option<
    unsafe extern "C" fn(
        memory: *mut ::std::os::raw::c_void,
        raster: *mut FT_Raster,
    ) -> ::std::os::raw::c_int,
>;
pub type FT_Raster_DoneFunc = ::std::option::Option<unsafe extern "C" fn(raster: FT_Raster)>;
pub type FT_Raster_ResetFunc = ::std::option::Option<
    unsafe extern "C" fn(
        raster: FT_Raster,
        pool_base: *mut ::std::os::raw::c_uchar,
        pool_size: ::std::os::raw::c_ulong,
    ),
>;
pub type FT_Raster_SetModeFunc = ::std::option::Option<
    unsafe extern "C" fn(
        raster: FT_Raster,
        mode: ::std::os::raw::c_ulong,
        args: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type FT_Raster_RenderFunc = ::std::option::Option<
    unsafe extern "C" fn(
        raster: FT_Raster,
        params: *const FT_Raster_Params,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Raster_Funcs_ {
    pub glyph_format: FT_Glyph_Format,
    pub raster_new: FT_Raster_NewFunc,
    pub raster_reset: FT_Raster_ResetFunc,
    pub raster_set_mode: FT_Raster_SetModeFunc,
    pub raster_render: FT_Raster_RenderFunc,
    pub raster_done: FT_Raster_DoneFunc,
}
pub type FT_Raster_Funcs = FT_Raster_Funcs_;
pub type FT_Bool = ::std::os::raw::c_uchar;
pub type FT_FWord = ::std::os::raw::c_short;
pub type FT_UFWord = ::std::os::raw::c_ushort;
pub type FT_Char = ::std::os::raw::c_schar;
pub type FT_Byte = ::std::os::raw::c_uchar;
pub type FT_Bytes = *const FT_Byte;
pub type FT_Tag = FT_UInt32;
pub type FT_String = ::std::os::raw::c_char;
pub type FT_Short = ::std::os::raw::c_short;
pub type FT_UShort = ::std::os::raw::c_ushort;
pub type FT_Int = ::std::os::raw::c_int;
pub type FT_UInt = ::std::os::raw::c_uint;
pub type FT_Long = ::std::os::raw::c_long;
pub type FT_ULong = ::std::os::raw::c_ulong;
pub type FT_F2Dot14 = ::std::os::raw::c_short;
pub type FT_F26Dot6 = ::std::os::raw::c_long;
pub type FT_Fixed = ::std::os::raw::c_long;
pub type FT_Error = ::std::os::raw::c_int;
pub type FT_Pointer = *mut ::std::os::raw::c_void;
pub type FT_Offset = size_t;
pub type FT_PtrDist = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_UnitVector_ {
    pub x: FT_F2Dot14,
    pub y: FT_F2Dot14,
}
pub type FT_UnitVector = FT_UnitVector_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Matrix_ {
    pub xx: FT_Fixed,
    pub xy: FT_Fixed,
    pub yx: FT_Fixed,
    pub yy: FT_Fixed,
}
pub type FT_Matrix = FT_Matrix_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Data_ {
    pub pointer: *const FT_Byte,
    pub length: FT_Int,
}
pub type FT_Data = FT_Data_;
pub type FT_Generic_Finalizer =
    ::std::option::Option<unsafe extern "C" fn(object: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Generic_ {
    pub data: *mut ::std::os::raw::c_void,
    pub finalizer: FT_Generic_Finalizer,
}
pub type FT_Generic = FT_Generic_;
pub type FT_ListNode = *mut FT_ListNodeRec_;
pub type FT_List = *mut FT_ListRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_ListNodeRec_ {
    pub prev: FT_ListNode,
    pub next: FT_ListNode,
    pub data: *mut ::std::os::raw::c_void,
}
pub type FT_ListNodeRec = FT_ListNodeRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_ListRec_ {
    pub head: FT_ListNode,
    pub tail: FT_ListNode,
}
pub type FT_ListRec = FT_ListRec_;
pub const FT_Mod_Err_Base: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_Autofit: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_BDF: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_Bzip2: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_Cache: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_CFF: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_CID: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_Gzip: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_LZW: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_OTvalid: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_PCF: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_PFR: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_PSaux: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_PShinter: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_PSnames: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_Raster: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_SFNT: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_Smooth: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_TrueType: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_Type1: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_Type42: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_Winfonts: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_GXvalid: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Base;
pub const FT_Mod_Err_Max: _bindgen_ty_1 = _bindgen_ty_1::FT_Mod_Err_Max;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_1 {
    FT_Mod_Err_Base = 0,
    FT_Mod_Err_Max = 1,
}
pub const FT_Err_Ok: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Ok;
pub const FT_Err_Cannot_Open_Resource: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Cannot_Open_Resource;
pub const FT_Err_Unknown_File_Format: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Unknown_File_Format;
pub const FT_Err_Invalid_File_Format: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_File_Format;
pub const FT_Err_Invalid_Version: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Version;
pub const FT_Err_Lower_Module_Version: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Lower_Module_Version;
pub const FT_Err_Invalid_Argument: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Argument;
pub const FT_Err_Unimplemented_Feature: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Unimplemented_Feature;
pub const FT_Err_Invalid_Table: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Table;
pub const FT_Err_Invalid_Offset: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Offset;
pub const FT_Err_Array_Too_Large: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Array_Too_Large;
pub const FT_Err_Missing_Module: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Missing_Module;
pub const FT_Err_Missing_Property: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Missing_Property;
pub const FT_Err_Invalid_Glyph_Index: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Glyph_Index;
pub const FT_Err_Invalid_Character_Code: _bindgen_ty_2 =
    _bindgen_ty_2::FT_Err_Invalid_Character_Code;
pub const FT_Err_Invalid_Glyph_Format: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Glyph_Format;
pub const FT_Err_Cannot_Render_Glyph: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Cannot_Render_Glyph;
pub const FT_Err_Invalid_Outline: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Outline;
pub const FT_Err_Invalid_Composite: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Composite;
pub const FT_Err_Too_Many_Hints: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Too_Many_Hints;
pub const FT_Err_Invalid_Pixel_Size: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Pixel_Size;
pub const FT_Err_Invalid_Handle: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Handle;
pub const FT_Err_Invalid_Library_Handle: _bindgen_ty_2 =
    _bindgen_ty_2::FT_Err_Invalid_Library_Handle;
pub const FT_Err_Invalid_Driver_Handle: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Driver_Handle;
pub const FT_Err_Invalid_Face_Handle: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Face_Handle;
pub const FT_Err_Invalid_Size_Handle: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Size_Handle;
pub const FT_Err_Invalid_Slot_Handle: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Slot_Handle;
pub const FT_Err_Invalid_CharMap_Handle: _bindgen_ty_2 =
    _bindgen_ty_2::FT_Err_Invalid_CharMap_Handle;
pub const FT_Err_Invalid_Cache_Handle: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Cache_Handle;
pub const FT_Err_Invalid_Stream_Handle: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Stream_Handle;
pub const FT_Err_Too_Many_Drivers: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Too_Many_Drivers;
pub const FT_Err_Too_Many_Extensions: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Too_Many_Extensions;
pub const FT_Err_Out_Of_Memory: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Out_Of_Memory;
pub const FT_Err_Unlisted_Object: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Unlisted_Object;
pub const FT_Err_Cannot_Open_Stream: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Cannot_Open_Stream;
pub const FT_Err_Invalid_Stream_Seek: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Stream_Seek;
pub const FT_Err_Invalid_Stream_Skip: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Stream_Skip;
pub const FT_Err_Invalid_Stream_Read: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Stream_Read;
pub const FT_Err_Invalid_Stream_Operation: _bindgen_ty_2 =
    _bindgen_ty_2::FT_Err_Invalid_Stream_Operation;
pub const FT_Err_Invalid_Frame_Operation: _bindgen_ty_2 =
    _bindgen_ty_2::FT_Err_Invalid_Frame_Operation;
pub const FT_Err_Nested_Frame_Access: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Nested_Frame_Access;
pub const FT_Err_Invalid_Frame_Read: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Frame_Read;
pub const FT_Err_Raster_Uninitialized: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Raster_Uninitialized;
pub const FT_Err_Raster_Corrupted: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Raster_Corrupted;
pub const FT_Err_Raster_Overflow: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Raster_Overflow;
pub const FT_Err_Raster_Negative_Height: _bindgen_ty_2 =
    _bindgen_ty_2::FT_Err_Raster_Negative_Height;
pub const FT_Err_Too_Many_Caches: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Too_Many_Caches;
pub const FT_Err_Invalid_Opcode: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Opcode;
pub const FT_Err_Too_Few_Arguments: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Too_Few_Arguments;
pub const FT_Err_Stack_Overflow: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Stack_Overflow;
pub const FT_Err_Code_Overflow: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Code_Overflow;
pub const FT_Err_Bad_Argument: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Bad_Argument;
pub const FT_Err_Divide_By_Zero: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Divide_By_Zero;
pub const FT_Err_Invalid_Reference: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Reference;
pub const FT_Err_Debug_OpCode: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Debug_OpCode;
pub const FT_Err_ENDF_In_Exec_Stream: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_ENDF_In_Exec_Stream;
pub const FT_Err_Nested_DEFS: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Nested_DEFS;
pub const FT_Err_Invalid_CodeRange: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_CodeRange;
pub const FT_Err_Execution_Too_Long: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Execution_Too_Long;
pub const FT_Err_Too_Many_Function_Defs: _bindgen_ty_2 =
    _bindgen_ty_2::FT_Err_Too_Many_Function_Defs;
pub const FT_Err_Too_Many_Instruction_Defs: _bindgen_ty_2 =
    _bindgen_ty_2::FT_Err_Too_Many_Instruction_Defs;
pub const FT_Err_Table_Missing: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Table_Missing;
pub const FT_Err_Horiz_Header_Missing: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Horiz_Header_Missing;
pub const FT_Err_Locations_Missing: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Locations_Missing;
pub const FT_Err_Name_Table_Missing: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Name_Table_Missing;
pub const FT_Err_CMap_Table_Missing: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_CMap_Table_Missing;
pub const FT_Err_Hmtx_Table_Missing: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Hmtx_Table_Missing;
pub const FT_Err_Post_Table_Missing: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Post_Table_Missing;
pub const FT_Err_Invalid_Horiz_Metrics: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Horiz_Metrics;
pub const FT_Err_Invalid_CharMap_Format: _bindgen_ty_2 =
    _bindgen_ty_2::FT_Err_Invalid_CharMap_Format;
pub const FT_Err_Invalid_PPem: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_PPem;
pub const FT_Err_Invalid_Vert_Metrics: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Vert_Metrics;
pub const FT_Err_Could_Not_Find_Context: _bindgen_ty_2 =
    _bindgen_ty_2::FT_Err_Could_Not_Find_Context;
pub const FT_Err_Invalid_Post_Table_Format: _bindgen_ty_2 =
    _bindgen_ty_2::FT_Err_Invalid_Post_Table_Format;
pub const FT_Err_Invalid_Post_Table: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Invalid_Post_Table;
pub const FT_Err_DEF_In_Glyf_Bytecode: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_DEF_In_Glyf_Bytecode;
pub const FT_Err_Missing_Bitmap: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Missing_Bitmap;
pub const FT_Err_Syntax_Error: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Syntax_Error;
pub const FT_Err_Stack_Underflow: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Stack_Underflow;
pub const FT_Err_Ignore: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Ignore;
pub const FT_Err_No_Unicode_Glyph_Name: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_No_Unicode_Glyph_Name;
pub const FT_Err_Glyph_Too_Big: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Glyph_Too_Big;
pub const FT_Err_Missing_Startfont_Field: _bindgen_ty_2 =
    _bindgen_ty_2::FT_Err_Missing_Startfont_Field;
pub const FT_Err_Missing_Font_Field: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Missing_Font_Field;
pub const FT_Err_Missing_Size_Field: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Missing_Size_Field;
pub const FT_Err_Missing_Fontboundingbox_Field: _bindgen_ty_2 =
    _bindgen_ty_2::FT_Err_Missing_Fontboundingbox_Field;
pub const FT_Err_Missing_Chars_Field: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Missing_Chars_Field;
pub const FT_Err_Missing_Startchar_Field: _bindgen_ty_2 =
    _bindgen_ty_2::FT_Err_Missing_Startchar_Field;
pub const FT_Err_Missing_Encoding_Field: _bindgen_ty_2 =
    _bindgen_ty_2::FT_Err_Missing_Encoding_Field;
pub const FT_Err_Missing_Bbx_Field: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Missing_Bbx_Field;
pub const FT_Err_Bbx_Too_Big: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Bbx_Too_Big;
pub const FT_Err_Corrupted_Font_Header: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Corrupted_Font_Header;
pub const FT_Err_Corrupted_Font_Glyphs: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Corrupted_Font_Glyphs;
pub const FT_Err_Max: _bindgen_ty_2 = _bindgen_ty_2::FT_Err_Max;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_2 {
    FT_Err_Ok = 0,
    FT_Err_Cannot_Open_Resource = 1,
    FT_Err_Unknown_File_Format = 2,
    FT_Err_Invalid_File_Format = 3,
    FT_Err_Invalid_Version = 4,
    FT_Err_Lower_Module_Version = 5,
    FT_Err_Invalid_Argument = 6,
    FT_Err_Unimplemented_Feature = 7,
    FT_Err_Invalid_Table = 8,
    FT_Err_Invalid_Offset = 9,
    FT_Err_Array_Too_Large = 10,
    FT_Err_Missing_Module = 11,
    FT_Err_Missing_Property = 12,
    FT_Err_Invalid_Glyph_Index = 16,
    FT_Err_Invalid_Character_Code = 17,
    FT_Err_Invalid_Glyph_Format = 18,
    FT_Err_Cannot_Render_Glyph = 19,
    FT_Err_Invalid_Outline = 20,
    FT_Err_Invalid_Composite = 21,
    FT_Err_Too_Many_Hints = 22,
    FT_Err_Invalid_Pixel_Size = 23,
    FT_Err_Invalid_Handle = 32,
    FT_Err_Invalid_Library_Handle = 33,
    FT_Err_Invalid_Driver_Handle = 34,
    FT_Err_Invalid_Face_Handle = 35,
    FT_Err_Invalid_Size_Handle = 36,
    FT_Err_Invalid_Slot_Handle = 37,
    FT_Err_Invalid_CharMap_Handle = 38,
    FT_Err_Invalid_Cache_Handle = 39,
    FT_Err_Invalid_Stream_Handle = 40,
    FT_Err_Too_Many_Drivers = 48,
    FT_Err_Too_Many_Extensions = 49,
    FT_Err_Out_Of_Memory = 64,
    FT_Err_Unlisted_Object = 65,
    FT_Err_Cannot_Open_Stream = 81,
    FT_Err_Invalid_Stream_Seek = 82,
    FT_Err_Invalid_Stream_Skip = 83,
    FT_Err_Invalid_Stream_Read = 84,
    FT_Err_Invalid_Stream_Operation = 85,
    FT_Err_Invalid_Frame_Operation = 86,
    FT_Err_Nested_Frame_Access = 87,
    FT_Err_Invalid_Frame_Read = 88,
    FT_Err_Raster_Uninitialized = 96,
    FT_Err_Raster_Corrupted = 97,
    FT_Err_Raster_Overflow = 98,
    FT_Err_Raster_Negative_Height = 99,
    FT_Err_Too_Many_Caches = 112,
    FT_Err_Invalid_Opcode = 128,
    FT_Err_Too_Few_Arguments = 129,
    FT_Err_Stack_Overflow = 130,
    FT_Err_Code_Overflow = 131,
    FT_Err_Bad_Argument = 132,
    FT_Err_Divide_By_Zero = 133,
    FT_Err_Invalid_Reference = 134,
    FT_Err_Debug_OpCode = 135,
    FT_Err_ENDF_In_Exec_Stream = 136,
    FT_Err_Nested_DEFS = 137,
    FT_Err_Invalid_CodeRange = 138,
    FT_Err_Execution_Too_Long = 139,
    FT_Err_Too_Many_Function_Defs = 140,
    FT_Err_Too_Many_Instruction_Defs = 141,
    FT_Err_Table_Missing = 142,
    FT_Err_Horiz_Header_Missing = 143,
    FT_Err_Locations_Missing = 144,
    FT_Err_Name_Table_Missing = 145,
    FT_Err_CMap_Table_Missing = 146,
    FT_Err_Hmtx_Table_Missing = 147,
    FT_Err_Post_Table_Missing = 148,
    FT_Err_Invalid_Horiz_Metrics = 149,
    FT_Err_Invalid_CharMap_Format = 150,
    FT_Err_Invalid_PPem = 151,
    FT_Err_Invalid_Vert_Metrics = 152,
    FT_Err_Could_Not_Find_Context = 153,
    FT_Err_Invalid_Post_Table_Format = 154,
    FT_Err_Invalid_Post_Table = 155,
    FT_Err_DEF_In_Glyf_Bytecode = 156,
    FT_Err_Missing_Bitmap = 157,
    FT_Err_Syntax_Error = 160,
    FT_Err_Stack_Underflow = 161,
    FT_Err_Ignore = 162,
    FT_Err_No_Unicode_Glyph_Name = 163,
    FT_Err_Glyph_Too_Big = 164,
    FT_Err_Missing_Startfont_Field = 176,
    FT_Err_Missing_Font_Field = 177,
    FT_Err_Missing_Size_Field = 178,
    FT_Err_Missing_Fontboundingbox_Field = 179,
    FT_Err_Missing_Chars_Field = 180,
    FT_Err_Missing_Startchar_Field = 181,
    FT_Err_Missing_Encoding_Field = 182,
    FT_Err_Missing_Bbx_Field = 183,
    FT_Err_Bbx_Too_Big = 184,
    FT_Err_Corrupted_Font_Header = 185,
    FT_Err_Corrupted_Font_Glyphs = 186,
    FT_Err_Max = 187,
}
extern "C" {
    pub fn FT_Error_String(error_code: FT_Error) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Glyph_Metrics_ {
    pub width: FT_Pos,
    pub height: FT_Pos,
    pub horiBearingX: FT_Pos,
    pub horiBearingY: FT_Pos,
    pub horiAdvance: FT_Pos,
    pub vertBearingX: FT_Pos,
    pub vertBearingY: FT_Pos,
    pub vertAdvance: FT_Pos,
}
pub type FT_Glyph_Metrics = FT_Glyph_Metrics_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Bitmap_Size_ {
    pub height: FT_Short,
    pub width: FT_Short,
    pub size: FT_Pos,
    pub x_ppem: FT_Pos,
    pub y_ppem: FT_Pos,
}
pub type FT_Bitmap_Size = FT_Bitmap_Size_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_LibraryRec_ {
    _unused: [u8; 0],
}
pub type FT_Library = *mut FT_LibraryRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_ModuleRec_ {
    _unused: [u8; 0],
}
pub type FT_Module = *mut FT_ModuleRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_DriverRec_ {
    _unused: [u8; 0],
}
pub type FT_Driver = *mut FT_DriverRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_RendererRec_ {
    _unused: [u8; 0],
}
pub type FT_Renderer = *mut FT_RendererRec_;
pub type FT_Face = *mut FT_FaceRec_;
pub type FT_Size = *mut FT_SizeRec_;
pub type FT_GlyphSlot = *mut FT_GlyphSlotRec_;
pub type FT_CharMap = *mut FT_CharMapRec_;
impl FT_Encoding_ {
    pub const FT_ENCODING_GB2312: FT_Encoding_ = FT_Encoding_::FT_ENCODING_PRC;
}
impl FT_Encoding_ {
    pub const FT_ENCODING_MS_SJIS: FT_Encoding_ = FT_Encoding_::FT_ENCODING_SJIS;
}
impl FT_Encoding_ {
    pub const FT_ENCODING_MS_GB2312: FT_Encoding_ = FT_Encoding_::FT_ENCODING_PRC;
}
impl FT_Encoding_ {
    pub const FT_ENCODING_MS_BIG5: FT_Encoding_ = FT_Encoding_::FT_ENCODING_BIG5;
}
impl FT_Encoding_ {
    pub const FT_ENCODING_MS_WANSUNG: FT_Encoding_ = FT_Encoding_::FT_ENCODING_WANSUNG;
}
impl FT_Encoding_ {
    pub const FT_ENCODING_MS_JOHAB: FT_Encoding_ = FT_Encoding_::FT_ENCODING_JOHAB;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FT_Encoding_ {
    FT_ENCODING_NONE = 0,
    FT_ENCODING_MS_SYMBOL = 1937337698,
    FT_ENCODING_UNICODE = 1970170211,
    FT_ENCODING_SJIS = 1936353651,
    FT_ENCODING_PRC = 1734484000,
    FT_ENCODING_BIG5 = 1651074869,
    FT_ENCODING_WANSUNG = 2002873971,
    FT_ENCODING_JOHAB = 1785686113,
    FT_ENCODING_ADOBE_STANDARD = 1094995778,
    FT_ENCODING_ADOBE_EXPERT = 1094992453,
    FT_ENCODING_ADOBE_CUSTOM = 1094992451,
    FT_ENCODING_ADOBE_LATIN_1 = 1818326065,
    FT_ENCODING_OLD_LATIN_2 = 1818326066,
    FT_ENCODING_APPLE_ROMAN = 1634889070,
}
pub use self::FT_Encoding_ as FT_Encoding;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_CharMapRec_ {
    pub face: FT_Face,
    pub encoding: FT_Encoding,
    pub platform_id: FT_UShort,
    pub encoding_id: FT_UShort,
}
pub type FT_CharMapRec = FT_CharMapRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Face_InternalRec_ {
    _unused: [u8; 0],
}
pub type FT_Face_Internal = *mut FT_Face_InternalRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_FaceRec_ {
    pub num_faces: FT_Long,
    pub face_index: FT_Long,
    pub face_flags: FT_Long,
    pub style_flags: FT_Long,
    pub num_glyphs: FT_Long,
    pub family_name: *mut FT_String,
    pub style_name: *mut FT_String,
    pub num_fixed_sizes: FT_Int,
    pub available_sizes: *mut FT_Bitmap_Size,
    pub num_charmaps: FT_Int,
    pub charmaps: *mut FT_CharMap,
    pub generic: FT_Generic,
    pub bbox: FT_BBox,
    pub units_per_EM: FT_UShort,
    pub ascender: FT_Short,
    pub descender: FT_Short,
    pub height: FT_Short,
    pub max_advance_width: FT_Short,
    pub max_advance_height: FT_Short,
    pub underline_position: FT_Short,
    pub underline_thickness: FT_Short,
    pub glyph: FT_GlyphSlot,
    pub size: FT_Size,
    pub charmap: FT_CharMap,
    pub driver: FT_Driver,
    pub memory: FT_Memory,
    pub stream: FT_Stream,
    pub sizes_list: FT_ListRec,
    pub autohint: FT_Generic,
    pub extensions: *mut ::std::os::raw::c_void,
    pub internal: FT_Face_Internal,
}
pub type FT_FaceRec = FT_FaceRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Size_InternalRec_ {
    _unused: [u8; 0],
}
pub type FT_Size_Internal = *mut FT_Size_InternalRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Size_Metrics_ {
    pub x_ppem: FT_UShort,
    pub y_ppem: FT_UShort,
    pub x_scale: FT_Fixed,
    pub y_scale: FT_Fixed,
    pub ascender: FT_Pos,
    pub descender: FT_Pos,
    pub height: FT_Pos,
    pub max_advance: FT_Pos,
}
pub type FT_Size_Metrics = FT_Size_Metrics_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_SizeRec_ {
    pub face: FT_Face,
    pub generic: FT_Generic,
    pub metrics: FT_Size_Metrics,
    pub internal: FT_Size_Internal,
}
pub type FT_SizeRec = FT_SizeRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_SubGlyphRec_ {
    _unused: [u8; 0],
}
pub type FT_SubGlyph = *mut FT_SubGlyphRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Slot_InternalRec_ {
    _unused: [u8; 0],
}
pub type FT_Slot_Internal = *mut FT_Slot_InternalRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_GlyphSlotRec_ {
    pub library: FT_Library,
    pub face: FT_Face,
    pub next: FT_GlyphSlot,
    pub glyph_index: FT_UInt,
    pub generic: FT_Generic,
    pub metrics: FT_Glyph_Metrics,
    pub linearHoriAdvance: FT_Fixed,
    pub linearVertAdvance: FT_Fixed,
    pub advance: FT_Vector,
    pub format: FT_Glyph_Format,
    pub bitmap: FT_Bitmap,
    pub bitmap_left: FT_Int,
    pub bitmap_top: FT_Int,
    pub outline: FT_Outline,
    pub num_subglyphs: FT_UInt,
    pub subglyphs: FT_SubGlyph,
    pub control_data: *mut ::std::os::raw::c_void,
    pub control_len: ::std::os::raw::c_long,
    pub lsb_delta: FT_Pos,
    pub rsb_delta: FT_Pos,
    pub other: *mut ::std::os::raw::c_void,
    pub internal: FT_Slot_Internal,
}
pub type FT_GlyphSlotRec = FT_GlyphSlotRec_;
extern "C" {
    pub fn FT_Init_FreeType(alibrary: *mut FT_Library) -> FT_Error;
}
extern "C" {
    pub fn FT_Done_FreeType(library: FT_Library) -> FT_Error;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Parameter_ {
    pub tag: FT_ULong,
    pub data: FT_Pointer,
}
pub type FT_Parameter = FT_Parameter_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Open_Args_ {
    pub flags: FT_UInt,
    pub memory_base: *const FT_Byte,
    pub memory_size: FT_Long,
    pub pathname: *mut FT_String,
    pub stream: FT_Stream,
    pub driver: FT_Module,
    pub num_params: FT_Int,
    pub params: *mut FT_Parameter,
}
pub type FT_Open_Args = FT_Open_Args_;
extern "C" {
    pub fn FT_New_Face(
        library: FT_Library,
        filepathname: *const ::std::os::raw::c_char,
        face_index: FT_Long,
        aface: *mut FT_Face,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_New_Memory_Face(
        library: FT_Library,
        file_base: *const FT_Byte,
        file_size: FT_Long,
        face_index: FT_Long,
        aface: *mut FT_Face,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Open_Face(
        library: FT_Library,
        args: *const FT_Open_Args,
        face_index: FT_Long,
        aface: *mut FT_Face,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Attach_File(face: FT_Face, filepathname: *const ::std::os::raw::c_char) -> FT_Error;
}
extern "C" {
    pub fn FT_Attach_Stream(face: FT_Face, parameters: *mut FT_Open_Args) -> FT_Error;
}
extern "C" {
    pub fn FT_Reference_Face(face: FT_Face) -> FT_Error;
}
extern "C" {
    pub fn FT_Done_Face(face: FT_Face) -> FT_Error;
}
extern "C" {
    pub fn FT_Select_Size(face: FT_Face, strike_index: FT_Int) -> FT_Error;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FT_Size_Request_Type_ {
    FT_SIZE_REQUEST_TYPE_NOMINAL = 0,
    FT_SIZE_REQUEST_TYPE_REAL_DIM = 1,
    FT_SIZE_REQUEST_TYPE_BBOX = 2,
    FT_SIZE_REQUEST_TYPE_CELL = 3,
    FT_SIZE_REQUEST_TYPE_SCALES = 4,
    FT_SIZE_REQUEST_TYPE_MAX = 5,
}
pub use self::FT_Size_Request_Type_ as FT_Size_Request_Type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Size_RequestRec_ {
    pub type_: FT_Size_Request_Type,
    pub width: FT_Long,
    pub height: FT_Long,
    pub horiResolution: FT_UInt,
    pub vertResolution: FT_UInt,
}
pub type FT_Size_RequestRec = FT_Size_RequestRec_;
pub type FT_Size_Request = *mut FT_Size_RequestRec_;
extern "C" {
    pub fn FT_Request_Size(face: FT_Face, req: FT_Size_Request) -> FT_Error;
}
extern "C" {
    pub fn FT_Set_Char_Size(
        face: FT_Face,
        char_width: FT_F26Dot6,
        char_height: FT_F26Dot6,
        horz_resolution: FT_UInt,
        vert_resolution: FT_UInt,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Set_Pixel_Sizes(
        face: FT_Face,
        pixel_width: FT_UInt,
        pixel_height: FT_UInt,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Load_Glyph(face: FT_Face, glyph_index: FT_UInt, load_flags: FT_Int32) -> FT_Error;
}
extern "C" {
    pub fn FT_Load_Char(face: FT_Face, char_code: FT_ULong, load_flags: FT_Int32) -> FT_Error;
}
extern "C" {
    pub fn FT_Set_Transform(face: FT_Face, matrix: *mut FT_Matrix, delta: *mut FT_Vector);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FT_Render_Mode_ {
    FT_RENDER_MODE_NORMAL = 0,
    FT_RENDER_MODE_LIGHT = 1,
    FT_RENDER_MODE_MONO = 2,
    FT_RENDER_MODE_LCD = 3,
    FT_RENDER_MODE_LCD_V = 4,
    FT_RENDER_MODE_MAX = 5,
}
pub use self::FT_Render_Mode_ as FT_Render_Mode;
extern "C" {
    pub fn FT_Render_Glyph(slot: FT_GlyphSlot, render_mode: FT_Render_Mode) -> FT_Error;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FT_Kerning_Mode_ {
    FT_KERNING_DEFAULT = 0,
    FT_KERNING_UNFITTED = 1,
    FT_KERNING_UNSCALED = 2,
}
pub use self::FT_Kerning_Mode_ as FT_Kerning_Mode;
extern "C" {
    pub fn FT_Get_Kerning(
        face: FT_Face,
        left_glyph: FT_UInt,
        right_glyph: FT_UInt,
        kern_mode: FT_UInt,
        akerning: *mut FT_Vector,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_Track_Kerning(
        face: FT_Face,
        point_size: FT_Fixed,
        degree: FT_Int,
        akerning: *mut FT_Fixed,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_Glyph_Name(
        face: FT_Face,
        glyph_index: FT_UInt,
        buffer: FT_Pointer,
        buffer_max: FT_UInt,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_Postscript_Name(face: FT_Face) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn FT_Select_Charmap(face: FT_Face, encoding: FT_Encoding) -> FT_Error;
}
extern "C" {
    pub fn FT_Set_Charmap(face: FT_Face, charmap: FT_CharMap) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_Charmap_Index(charmap: FT_CharMap) -> FT_Int;
}
extern "C" {
    pub fn FT_Get_Char_Index(face: FT_Face, charcode: FT_ULong) -> FT_UInt;
}
extern "C" {
    pub fn FT_Get_First_Char(face: FT_Face, agindex: *mut FT_UInt) -> FT_ULong;
}
extern "C" {
    pub fn FT_Get_Next_Char(face: FT_Face, char_code: FT_ULong, agindex: *mut FT_UInt) -> FT_ULong;
}
extern "C" {
    pub fn FT_Face_Properties(
        face: FT_Face,
        num_properties: FT_UInt,
        properties: *mut FT_Parameter,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_Name_Index(face: FT_Face, glyph_name: *const FT_String) -> FT_UInt;
}
extern "C" {
    pub fn FT_Get_SubGlyph_Info(
        glyph: FT_GlyphSlot,
        sub_index: FT_UInt,
        p_index: *mut FT_Int,
        p_flags: *mut FT_UInt,
        p_arg1: *mut FT_Int,
        p_arg2: *mut FT_Int,
        p_transform: *mut FT_Matrix,
    ) -> FT_Error;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_LayerIterator_ {
    pub num_layers: FT_UInt,
    pub layer: FT_UInt,
    pub p: *mut FT_Byte,
}
pub type FT_LayerIterator = FT_LayerIterator_;
extern "C" {
    pub fn FT_Get_Color_Glyph_Layer(
        face: FT_Face,
        base_glyph: FT_UInt,
        aglyph_index: *mut FT_UInt,
        acolor_index: *mut FT_UInt,
        iterator: *mut FT_LayerIterator,
    ) -> FT_Bool;
}
extern "C" {
    pub fn FT_Get_FSType_Flags(face: FT_Face) -> FT_UShort;
}
extern "C" {
    pub fn FT_Face_GetCharVariantIndex(
        face: FT_Face,
        charcode: FT_ULong,
        variantSelector: FT_ULong,
    ) -> FT_UInt;
}
extern "C" {
    pub fn FT_Face_GetCharVariantIsDefault(
        face: FT_Face,
        charcode: FT_ULong,
        variantSelector: FT_ULong,
    ) -> FT_Int;
}
extern "C" {
    pub fn FT_Face_GetVariantSelectors(face: FT_Face) -> *mut FT_UInt32;
}
extern "C" {
    pub fn FT_Face_GetVariantsOfChar(face: FT_Face, charcode: FT_ULong) -> *mut FT_UInt32;
}
extern "C" {
    pub fn FT_Face_GetCharsOfVariant(face: FT_Face, variantSelector: FT_ULong) -> *mut FT_UInt32;
}
extern "C" {
    pub fn FT_MulDiv(a: FT_Long, b: FT_Long, c: FT_Long) -> FT_Long;
}
extern "C" {
    pub fn FT_MulFix(a: FT_Long, b: FT_Long) -> FT_Long;
}
extern "C" {
    pub fn FT_DivFix(a: FT_Long, b: FT_Long) -> FT_Long;
}
extern "C" {
    pub fn FT_RoundFix(a: FT_Fixed) -> FT_Fixed;
}
extern "C" {
    pub fn FT_CeilFix(a: FT_Fixed) -> FT_Fixed;
}
extern "C" {
    pub fn FT_FloorFix(a: FT_Fixed) -> FT_Fixed;
}
extern "C" {
    pub fn FT_Vector_Transform(vector: *mut FT_Vector, matrix: *const FT_Matrix);
}
extern "C" {
    pub fn FT_Library_Version(
        library: FT_Library,
        amajor: *mut FT_Int,
        aminor: *mut FT_Int,
        apatch: *mut FT_Int,
    );
}
extern "C" {
    pub fn FT_Face_CheckTrueTypePatents(face: FT_Face) -> FT_Bool;
}
extern "C" {
    pub fn FT_Face_SetUnpatentedHinting(face: FT_Face, value: FT_Bool) -> FT_Bool;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FT_LcdFilter_ {
    FT_LCD_FILTER_NONE = 0,
    FT_LCD_FILTER_DEFAULT = 1,
    FT_LCD_FILTER_LIGHT = 2,
    FT_LCD_FILTER_LEGACY1 = 3,
    FT_LCD_FILTER_LEGACY = 16,
    FT_LCD_FILTER_MAX = 17,
}
pub use self::FT_LcdFilter_ as FT_LcdFilter;
extern "C" {
    pub fn FT_Library_SetLcdFilter(library: FT_Library, filter: FT_LcdFilter) -> FT_Error;
}
extern "C" {
    pub fn FT_Library_SetLcdFilterWeights(
        library: FT_Library,
        weights: *mut ::std::os::raw::c_uchar,
    ) -> FT_Error;
}
pub type FT_LcdFiveTapFilter = [FT_Byte; 5usize];
extern "C" {
    pub fn FT_Library_SetLcdGeometry(library: FT_Library, sub: *mut FT_Vector) -> FT_Error;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FT_Sfnt_Tag_ {
    FT_SFNT_HEAD = 0,
    FT_SFNT_MAXP = 1,
    FT_SFNT_OS2 = 2,
    FT_SFNT_HHEA = 3,
    FT_SFNT_VHEA = 4,
    FT_SFNT_POST = 5,
    FT_SFNT_PCLT = 6,
    FT_SFNT_MAX = 7,
}
pub use self::FT_Sfnt_Tag_ as FT_Sfnt_Tag;
extern "C" {
    pub fn FT_Get_Sfnt_Table(face: FT_Face, tag: FT_Sfnt_Tag) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn FT_Load_Sfnt_Table(
        face: FT_Face,
        tag: FT_ULong,
        offset: FT_Long,
        buffer: *mut FT_Byte,
        length: *mut FT_ULong,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Sfnt_Table_Info(
        face: FT_Face,
        table_index: FT_UInt,
        tag: *mut FT_ULong,
        length: *mut FT_ULong,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_CMap_Language_ID(charmap: FT_CharMap) -> FT_ULong;
}
extern "C" {
    pub fn FT_Get_CMap_Format(charmap: FT_CharMap) -> FT_Long;
}
pub type FT_Module_Interface = FT_Pointer;
pub type FT_Module_Constructor =
    ::std::option::Option<unsafe extern "C" fn(module: FT_Module) -> FT_Error>;
pub type FT_Module_Destructor = ::std::option::Option<unsafe extern "C" fn(module: FT_Module)>;
pub type FT_Module_Requester = ::std::option::Option<
    unsafe extern "C" fn(
        module: FT_Module,
        name: *const ::std::os::raw::c_char,
    ) -> FT_Module_Interface,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Module_Class_ {
    pub module_flags: FT_ULong,
    pub module_size: FT_Long,
    pub module_name: *const FT_String,
    pub module_version: FT_Fixed,
    pub module_requires: FT_Fixed,
    pub module_interface: *const ::std::os::raw::c_void,
    pub module_init: FT_Module_Constructor,
    pub module_done: FT_Module_Destructor,
    pub get_interface: FT_Module_Requester,
}
pub type FT_Module_Class = FT_Module_Class_;
extern "C" {
    pub fn FT_Add_Module(library: FT_Library, clazz: *const FT_Module_Class) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_Module(
        library: FT_Library,
        module_name: *const ::std::os::raw::c_char,
    ) -> FT_Module;
}
extern "C" {
    pub fn FT_Remove_Module(library: FT_Library, module: FT_Module) -> FT_Error;
}
extern "C" {
    pub fn FT_Property_Set(
        library: FT_Library,
        module_name: *const FT_String,
        property_name: *const FT_String,
        value: *const ::std::os::raw::c_void,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Property_Get(
        library: FT_Library,
        module_name: *const FT_String,
        property_name: *const FT_String,
        value: *mut ::std::os::raw::c_void,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Set_Default_Properties(library: FT_Library);
}
extern "C" {
    pub fn FT_Reference_Library(library: FT_Library) -> FT_Error;
}
extern "C" {
    pub fn FT_New_Library(memory: FT_Memory, alibrary: *mut FT_Library) -> FT_Error;
}
extern "C" {
    pub fn FT_Done_Library(library: FT_Library) -> FT_Error;
}
pub type FT_DebugHook_Func =
    ::std::option::Option<unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void) -> FT_Error>;
extern "C" {
    pub fn FT_Set_Debug_Hook(
        library: FT_Library,
        hook_index: FT_UInt,
        debug_hook: FT_DebugHook_Func,
    );
}
extern "C" {
    pub fn FT_Add_Default_Modules(library: FT_Library);
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FT_TrueTypeEngineType_ {
    FT_TRUETYPE_ENGINE_TYPE_NONE = 0,
    FT_TRUETYPE_ENGINE_TYPE_UNPATENTED = 1,
    FT_TRUETYPE_ENGINE_TYPE_PATENTED = 2,
}
pub use self::FT_TrueTypeEngineType_ as FT_TrueTypeEngineType;
extern "C" {
    pub fn FT_Get_TrueType_Engine_Type(library: FT_Library) -> FT_TrueTypeEngineType;
}
extern "C" {
    pub fn FT_Outline_Decompose(
        outline: *mut FT_Outline,
        func_interface: *const FT_Outline_Funcs,
        user: *mut ::std::os::raw::c_void,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Outline_New(
        library: FT_Library,
        numPoints: FT_UInt,
        numContours: FT_Int,
        anoutline: *mut FT_Outline,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Outline_Done(library: FT_Library, outline: *mut FT_Outline) -> FT_Error;
}
extern "C" {
    pub fn FT_Outline_Check(outline: *mut FT_Outline) -> FT_Error;
}
extern "C" {
    pub fn FT_Outline_Get_CBox(outline: *const FT_Outline, acbox: *mut FT_BBox);
}
extern "C" {
    pub fn FT_Outline_Translate(outline: *const FT_Outline, xOffset: FT_Pos, yOffset: FT_Pos);
}
extern "C" {
    pub fn FT_Outline_Copy(source: *const FT_Outline, target: *mut FT_Outline) -> FT_Error;
}
extern "C" {
    pub fn FT_Outline_Transform(outline: *const FT_Outline, matrix: *const FT_Matrix);
}
extern "C" {
    pub fn FT_Outline_Embolden(outline: *mut FT_Outline, strength: FT_Pos) -> FT_Error;
}
extern "C" {
    pub fn FT_Outline_EmboldenXY(
        outline: *mut FT_Outline,
        xstrength: FT_Pos,
        ystrength: FT_Pos,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Outline_Reverse(outline: *mut FT_Outline);
}
extern "C" {
    pub fn FT_Outline_Get_Bitmap(
        library: FT_Library,
        outline: *mut FT_Outline,
        abitmap: *const FT_Bitmap,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Outline_Render(
        library: FT_Library,
        outline: *mut FT_Outline,
        params: *mut FT_Raster_Params,
    ) -> FT_Error;
}
impl FT_Orientation_ {
    pub const FT_ORIENTATION_FILL_RIGHT: FT_Orientation_ = FT_Orientation_::FT_ORIENTATION_TRUETYPE;
}
impl FT_Orientation_ {
    pub const FT_ORIENTATION_FILL_LEFT: FT_Orientation_ =
        FT_Orientation_::FT_ORIENTATION_POSTSCRIPT;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FT_Orientation_ {
    FT_ORIENTATION_TRUETYPE = 0,
    FT_ORIENTATION_POSTSCRIPT = 1,
    FT_ORIENTATION_NONE = 2,
}
pub use self::FT_Orientation_ as FT_Orientation;
extern "C" {
    pub fn FT_Outline_Get_Orientation(outline: *mut FT_Outline) -> FT_Orientation;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PS_FontInfoRec_ {
    pub version: *mut FT_String,
    pub notice: *mut FT_String,
    pub full_name: *mut FT_String,
    pub family_name: *mut FT_String,
    pub weight: *mut FT_String,
    pub italic_angle: FT_Long,
    pub is_fixed_pitch: FT_Bool,
    pub underline_position: FT_Short,
    pub underline_thickness: FT_UShort,
}
pub type PS_FontInfo = *mut PS_FontInfoRec_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PS_PrivateRec_ {
    pub unique_id: FT_Int,
    pub lenIV: FT_Int,
    pub num_blue_values: FT_Byte,
    pub num_other_blues: FT_Byte,
    pub num_family_blues: FT_Byte,
    pub num_family_other_blues: FT_Byte,
    pub blue_values: [FT_Short; 14usize],
    pub other_blues: [FT_Short; 10usize],
    pub family_blues: [FT_Short; 14usize],
    pub family_other_blues: [FT_Short; 10usize],
    pub blue_scale: FT_Fixed,
    pub blue_shift: FT_Int,
    pub blue_fuzz: FT_Int,
    pub standard_width: [FT_UShort; 1usize],
    pub standard_height: [FT_UShort; 1usize],
    pub num_snap_widths: FT_Byte,
    pub num_snap_heights: FT_Byte,
    pub force_bold: FT_Bool,
    pub round_stem_up: FT_Bool,
    pub snap_widths: [FT_Short; 13usize],
    pub snap_heights: [FT_Short; 13usize],
    pub expansion_factor: FT_Fixed,
    pub language_group: FT_Long,
    pub password: FT_Long,
    pub min_feature: [FT_Short; 2usize],
}
pub type PS_Private = *mut PS_PrivateRec_;
extern "C" {
    pub fn FT_Has_PS_Glyph_Names(face: FT_Face) -> FT_Int;
}
extern "C" {
    pub fn FT_Get_PS_Font_Info(face: FT_Face, afont_info: PS_FontInfo) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_PS_Font_Private(face: FT_Face, afont_private: PS_Private) -> FT_Error;
}
impl PS_Dict_Keys_ {
    pub const PS_DICT_MAX: PS_Dict_Keys_ = PS_Dict_Keys_::PS_DICT_ITALIC_ANGLE;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum PS_Dict_Keys_ {
    PS_DICT_FONT_TYPE = 0,
    PS_DICT_FONT_MATRIX = 1,
    PS_DICT_FONT_BBOX = 2,
    PS_DICT_PAINT_TYPE = 3,
    PS_DICT_FONT_NAME = 4,
    PS_DICT_UNIQUE_ID = 5,
    PS_DICT_NUM_CHAR_STRINGS = 6,
    PS_DICT_CHAR_STRING_KEY = 7,
    PS_DICT_CHAR_STRING = 8,
    PS_DICT_ENCODING_TYPE = 9,
    PS_DICT_ENCODING_ENTRY = 10,
    PS_DICT_NUM_SUBRS = 11,
    PS_DICT_SUBR = 12,
    PS_DICT_STD_HW = 13,
    PS_DICT_STD_VW = 14,
    PS_DICT_NUM_BLUE_VALUES = 15,
    PS_DICT_BLUE_VALUE = 16,
    PS_DICT_BLUE_FUZZ = 17,
    PS_DICT_NUM_OTHER_BLUES = 18,
    PS_DICT_OTHER_BLUE = 19,
    PS_DICT_NUM_FAMILY_BLUES = 20,
    PS_DICT_FAMILY_BLUE = 21,
    PS_DICT_NUM_FAMILY_OTHER_BLUES = 22,
    PS_DICT_FAMILY_OTHER_BLUE = 23,
    PS_DICT_BLUE_SCALE = 24,
    PS_DICT_BLUE_SHIFT = 25,
    PS_DICT_NUM_STEM_SNAP_H = 26,
    PS_DICT_STEM_SNAP_H = 27,
    PS_DICT_NUM_STEM_SNAP_V = 28,
    PS_DICT_STEM_SNAP_V = 29,
    PS_DICT_FORCE_BOLD = 30,
    PS_DICT_RND_STEM_UP = 31,
    PS_DICT_MIN_FEATURE = 32,
    PS_DICT_LEN_IV = 33,
    PS_DICT_PASSWORD = 34,
    PS_DICT_LANGUAGE_GROUP = 35,
    PS_DICT_VERSION = 36,
    PS_DICT_NOTICE = 37,
    PS_DICT_FULL_NAME = 38,
    PS_DICT_FAMILY_NAME = 39,
    PS_DICT_WEIGHT = 40,
    PS_DICT_IS_FIXED_PITCH = 41,
    PS_DICT_UNDERLINE_POSITION = 42,
    PS_DICT_UNDERLINE_THICKNESS = 43,
    PS_DICT_FS_TYPE = 44,
    PS_DICT_ITALIC_ANGLE = 45,
}
pub use self::PS_Dict_Keys_ as PS_Dict_Keys;
extern "C" {
    pub fn FT_Get_PS_Font_Value(
        face: FT_Face,
        key: PS_Dict_Keys,
        idx: FT_UInt,
        value: *mut ::std::os::raw::c_void,
        value_len: FT_Long,
    ) -> FT_Long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_MM_Axis_ {
    pub name: *mut FT_String,
    pub minimum: FT_Long,
    pub maximum: FT_Long,
}
pub type FT_MM_Axis = FT_MM_Axis_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Multi_Master_ {
    pub num_axis: FT_UInt,
    pub num_designs: FT_UInt,
    pub axis: [FT_MM_Axis; 4usize],
}
pub type FT_Multi_Master = FT_Multi_Master_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Var_Axis_ {
    pub name: *mut FT_String,
    pub minimum: FT_Fixed,
    pub def: FT_Fixed,
    pub maximum: FT_Fixed,
    pub tag: FT_ULong,
    pub strid: FT_UInt,
}
pub type FT_Var_Axis = FT_Var_Axis_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_Var_Named_Style_ {
    pub coords: *mut FT_Fixed,
    pub strid: FT_UInt,
    pub psid: FT_UInt,
}
pub type FT_Var_Named_Style = FT_Var_Named_Style_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FT_MM_Var_ {
    pub num_axis: FT_UInt,
    pub num_designs: FT_UInt,
    pub num_namedstyles: FT_UInt,
    pub axis: *mut FT_Var_Axis,
    pub namedstyle: *mut FT_Var_Named_Style,
}
pub type FT_MM_Var = FT_MM_Var_;
extern "C" {
    pub fn FT_Get_Multi_Master(face: FT_Face, amaster: *mut FT_Multi_Master) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_MM_Var(face: FT_Face, amaster: *mut *mut FT_MM_Var) -> FT_Error;
}
extern "C" {
    pub fn FT_Done_MM_Var(library: FT_Library, amaster: *mut FT_MM_Var) -> FT_Error;
}
extern "C" {
    pub fn FT_Set_MM_Design_Coordinates(
        face: FT_Face,
        num_coords: FT_UInt,
        coords: *mut FT_Long,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Set_Var_Design_Coordinates(
        face: FT_Face,
        num_coords: FT_UInt,
        coords: *mut FT_Fixed,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_Var_Design_Coordinates(
        face: FT_Face,
        num_coords: FT_UInt,
        coords: *mut FT_Fixed,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Set_MM_Blend_Coordinates(
        face: FT_Face,
        num_coords: FT_UInt,
        coords: *mut FT_Fixed,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_MM_Blend_Coordinates(
        face: FT_Face,
        num_coords: FT_UInt,
        coords: *mut FT_Fixed,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Set_Var_Blend_Coordinates(
        face: FT_Face,
        num_coords: FT_UInt,
        coords: *mut FT_Fixed,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_Var_Blend_Coordinates(
        face: FT_Face,
        num_coords: FT_UInt,
        coords: *mut FT_Fixed,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Set_MM_WeightVector(
        face: FT_Face,
        len: FT_UInt,
        weightvector: *mut FT_Fixed,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_MM_WeightVector(
        face: FT_Face,
        len: *mut FT_UInt,
        weightvector: *mut FT_Fixed,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Get_Var_Axis_Flags(
        master: *mut FT_MM_Var,
        axis_index: FT_UInt,
        flags: *mut FT_UInt,
    ) -> FT_Error;
}
extern "C" {
    pub fn FT_Set_Named_Instance(face: FT_Face, instance_index: FT_UInt) -> FT_Error;
}
